{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","todoList","newTodo","handleSubmit","event","taskDesc","target","elements","todoTask","value","length","setState","reset","preventDefault","editTodo","index","newtodoList","prompt","deleteTodoTask","taskArray","splice","className","onSubmit","this","type","name","placeholder","autoComplete","map","item","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OA6EeA,E,4MAxEVC,MAAM,CACFC,SAAS,GACTC,QAAQ,I,EAwCjBC,aAAc,SAACC,GACV,IAAIC,EAAUD,EAAME,OAAOC,SAASC,SAASC,MAC1CJ,EAASK,OAAQ,IACrB,EAAKC,SAAS,CACdV,SAAS,GAAD,mBAAK,EAAKD,MAAMC,UAAhB,CAAyBI,MAEjCD,EAAME,OAAOM,SAEbR,EAAMS,kB,EAGVC,SAAU,SAACC,GAEP,IAAIC,EAAY,YAAI,EAAKhB,MAAMC,UACzBC,EAASe,OAAO,yBAA0BD,EAAYD,IAC5DC,EAAYD,GAAOb,EACnB,EAAKS,SAAS,CAACV,SAASe,K,EAI5BE,eAAe,SAACd,EAAMW,GAEjB,IAAII,EAAU,YAAI,EAAKnB,MAAMC,UAC7BkB,EAAUC,OAAOL,EAAM,GAEvB,EAAKJ,SAAS,CAACV,SAASkB,K,4CA9DzB,WAAS,IAAD,OAER,OACJ,gCACE,qBAAKE,UAAU,iCAAf,SACA,qBAAKA,UAAU,YAAf,SACA,oBAAIA,UAAU,YAAd,0BAIF,sBAAMA,UAAU,OAAOC,SAAWC,KAAKpB,aAAvC,SACI,sBAAKkB,UAAU,cAAf,UACA,uBAAOG,KAAK,OAAOC,KAAK,WAAWJ,UAAU,eAAeK,YAAY,yBAAyBC,aAAa,QAC9G,qBAAKN,UAAU,qBAAf,SACA,wBAAQG,KAAK,SAASH,UAAU,0BAAhC,0BAKJ,oBAAIA,UAAU,aAAd,SAESE,KAAKvB,MAAMC,SAAS2B,KAChB,SAACC,EAAKd,GACF,OAAM,qBAAIM,UAAU,kBAAd,UACDQ,EACD,wBAAQR,UAAU,4CAA4CS,QAAS,SAAC1B,GAAS,EAAKc,eAAed,EAAMW,IAA3G,oBACA,wBAAQM,UAAU,6CAA6CS,QAAU,SAAA1B,GAAQ,EAAKU,SAASC,IAA/F,sBAHuCA,e,GA7BzCgB,aCQJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8180abe3.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\n class App extends Component{\r\n     state={\r\n         todoList:[],\r\n         newTodo:\"\",\r\n     }\r\n  \r\n    render(){\r\n       \r\n    return (\r\n<div>\r\n  <div className=\"jumbotron jumbotron-fluid py-2\">\r\n  <div className=\"container\">\r\n  <h1 className=\"display-4\">Todo App</h1>\r\n   \r\n  </div>\r\n  </div>\r\n<form className=\"mb-3\" onSubmit= {this.handleSubmit}>\r\n    <div className=\"input-group\">\r\n    <input type=\"text\" name=\"todoTask\" className=\"form-control\" placeholder=\"Please enter your task\" autoComplete=\"off\"/>\r\n    <div className=\"input-group-append\">\r\n    <button type=\"submit\" className=\"btn btn-outline-success\"> Add </button>\r\n    </div>\r\n    </div>\r\n</form>\r\n \r\n<ul className=\"list-group\">\r\n     {\r\n         this.state.todoList.map(\r\n             (item,index)=>{\r\n                 return<li className=\"list-group-item\"key ={index}>\r\n                     {item}\r\n                     <button className=\"btn btn-sm btn-outline-danger float-right\" onClick={(event)=>{this.deleteTodoTask(event,index)}}>Delete</button>\r\n                     <button className=\"btn btn btn-sm btn-primary m-7 float-right\" onClick={(event=>{this.editTodo(index)})} > Edit </button>\r\n                 </li>\r\n             }\r\n         )\r\n     }\r\n</ul>\r\n</div>\r\n      \r\n);\r\n}\r\n\r\nhandleSubmit =(event)=>{\r\n     var taskDesc= event.target.elements.todoTask.value;\r\n     if(taskDesc.length >0){\r\n    this.setState({\r\n    todoList:[...this.state.todoList,taskDesc]\r\n})\r\n    event.target.reset();\r\n     }\r\n    event.preventDefault();\r\n}\r\n \r\neditTodo =(index)=>\r\n {\r\n    var newtodoList=[...this.state.todoList]\r\n    const newTodo= prompt('Let\\'s make some change',newtodoList[index]);\r\n    newtodoList[index]=newTodo\r\n    this.setState({todoList:newtodoList})\r\n\r\n }\r\n\r\ndeleteTodoTask=(event,index)=> {\r\n     \r\n     var taskArray=[...this.state.todoList]\r\n     taskArray.splice(index,1)\r\n     \r\n     this.setState({todoList:taskArray})\r\n     \r\n }\r\n\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}